using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenNLP.Tools.Trees.TRegex
{
    /// <summary>
    /// Token literal values and constants.
    /// Generated by org.javacc.parser.OtherFilesGen#start()
    /// </summary>
    public abstract class TregexParserConstants
    {
        /// <summary>End of File</summary>
        public const int Eof = 0;
        /// <summary>RegularExpression Id</summary>
        public const int RELATION = 4;
        /// <summary>RegularExpression Id</summary>
        public const int MultiRelation = 5;
        /// <summary>RegularExpression Id</summary>
        public const int RelWStrArg = 6;
        /// <summary>RegularExpression Id</summary>
        public const int Number = 7;
        /// <summary>RegularExpression Id</summary>
        public const int Identifier = 8;
        /// <summary>RegularExpression Id</summary>
        public const int Blank = 9;
        /// <summary>RegularExpression Id</summary>
        public const int Regex = 10;
        /// <summary>RegularExpression Id</summary>
        public const int Varname = 11;
        /// <summary>Lexical state</summary>
        public const int Default = 0;

        /// <summary>Literal token values</summary>
        protected string[] TokenImage =
        {
            "<EOF>",
            "\" \"",
            "\"\\r\"",
            "\"\\t\"",
            "<RELATION>",
            "\"<...\"",
            "<REL_W_STR_ARG>",
            "<NUMBER>",
            "<IDENTIFIER>",
            "\"__\"",
            "<REGEX>",
            "<VARNAME>",
            "\"|\"",
            "\"\\n\"",
            "\"(\"",
            "\")\"",
            "\"!\"",
            "\"@\"",
            "\"#\"",
            "\"%\"",
            "\"=\"",
            "\"~\"",
            "\"&\"",
            "\"?\"",
            "\"[\"",
            "\"]\"",
            "\"{\"",
            "\";\"",
            "\"}\"",
        };
    }
}